<db_tables_available>
<tables>
    <table>
    <table_name>customers</table_name>
    <table_description>Core customer information and profiles for mobile subscribers</table_description>
    <table_schema>
    customers (
        customer_id SERIAL PRIMARY KEY,
        customer_name VARCHAR(100) NOT NULL,
        email VARCHAR(150) UNIQUE,
        phone VARCHAR(20),
        registration_date DATE NOT NULL DEFAULT CURRENT_DATE,
        customer_segment VARCHAR(20) CHECK (customer_segment IN ('Premium', 'Standard', 'Basic')) DEFAULT 'Standard',
        status VARCHAR(20) CHECK (status IN ('Active', 'Inactive', 'Suspended')) DEFAULT 'Active',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    </table_schema>
    <data_dictionary>
    customer_id: Unique identifier for each customer
    customer_name: Full name of the customer
    email: Customer's email address
    phone: Customer's phone number
    registration_date: Date when customer registered
    customer_segment: Business segment (Premium, Standard, Basic)
    status: Current account status (Active, Inactive, Suspended)
    </data_dictionary>
    </table>

    <table>
    <table_name>channels</table_name>
    <table_description>Communication channels catalog (Phone, Email, Chat, etc.)</table_description>
    <table_schema>
    channels (
        channel_id SERIAL PRIMARY KEY,
        channel_name VARCHAR(50) NOT NULL UNIQUE,
        channel_type VARCHAR(30) CHECK (channel_type IN ('Digital', 'Voice', 'In-Person')) NOT NULL,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    </table_schema>
    <data_dictionary>
    channel_id: Unique identifier for each channel
    channel_name: Display name of the channel (Phone, Email, Web Chat, Mobile App, WhatsApp, In-Store, Social Media, SMS)
    channel_type: Type category (Digital, Voice, In-Person)
    is_active: Whether channel is currently active
    </data_dictionary>
    </table>

    <table>
    <table_name>agents</table_name>
    <table_description>Customer service agents catalog</table_description>
    <table_schema>
    agents (
        agent_id SERIAL PRIMARY KEY,
        agent_name VARCHAR(100) NOT NULL,
        employee_id VARCHAR(20) UNIQUE,
        department VARCHAR(50),
        skill_level VARCHAR(20) CHECK (skill_level IN ('Junior', 'Senior', 'Expert')) DEFAULT 'Junior',
        is_active BOOLEAN DEFAULT TRUE,
        hire_date DATE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    </table_schema>
    <data_dictionary>
    agent_id: Unique identifier for each agent
    agent_name: Full name of the agent
    employee_id: Company employee identifier
    department: Department (Customer Service, Technical Support, Billing, Sales)
    skill_level: Experience level (Junior, Senior, Expert)
    is_active: Whether agent is currently active
    hire_date: Date when agent was hired
    </data_dictionary>
    </table>

    <table>
    <table_name>interaction_types</table_name>
    <table_description>Types of customer interactions catalog (Support, Sales, Billing, etc.)</table_description>
    <table_schema>
    interaction_types (
        interaction_type_id SERIAL PRIMARY KEY,
        interaction_code VARCHAR(20) NOT NULL UNIQUE,
        interaction_name VARCHAR(100) NOT NULL,
        category VARCHAR(50),
        priority_level VARCHAR(20) CHECK (priority_level IN ('Low', 'Medium', 'High', 'Critical')) DEFAULT 'Medium',
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    </table_schema>
    <data_dictionary>
    interaction_type_id: Unique identifier for each interaction type
    interaction_code: Short code for the interaction (BILLING, TECH_SUPPORT, PLAN_CHANGE, etc.)
    interaction_name: Full descriptive name
    category: Main category (Billing, Technical, Account, Support, Sales)
    priority_level: Business priority (Low, Medium, High, Critical)
    is_active: Whether interaction type is currently active
    </data_dictionary>
    </table>

    <table>
    <table_name>service_plans</table_name>
    <table_description>Available service plans and packages catalog</table_description>
    <table_schema>
    service_plans (
        service_plan_id SERIAL PRIMARY KEY,
        plan_name VARCHAR(100) NOT NULL UNIQUE,
        plan_type VARCHAR(50),
        monthly_fee DECIMAL(10,2),
        data_allowance_gb INTEGER,
        voice_minutes INTEGER,
        sms_allowance INTEGER,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    </table_schema>
    <data_dictionary>
    service_plan_id: Unique identifier for each service plan
    plan_name: Name of the service plan
    plan_type: Type of plan (Prepaid, Postpaid, Business)
    monthly_fee: Monthly cost of the plan
    data_allowance_gb: Data allowance in GB
    voice_minutes: Voice minutes included
    sms_allowance: SMS messages included
    is_active: Whether plan is currently available
    </data_dictionary>
    </table>

    <table>
    <table_name>customer_service_plans</table_name>
    <table_description>Customer to service plan relationships and history</table_description>
    <table_schema>
    customer_service_plans (
        customer_service_plan_id SERIAL PRIMARY KEY,
        customer_id INTEGER NOT NULL REFERENCES customers(customer_id) ON DELETE CASCADE,
        service_plan_id INTEGER NOT NULL REFERENCES service_plans(service_plan_id),
        start_date DATE NOT NULL DEFAULT CURRENT_DATE,
        end_date DATE,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(customer_id, service_plan_id, start_date)
    )
    </table_schema>
    <data_dictionary>
    customer_service_plan_id: Unique identifier for each customer-plan relationship
    customer_id: Reference to customer
    service_plan_id: Reference to service plan
    start_date: When customer started using this plan
    end_date: When customer stopped using this plan (NULL if current)
    is_active: Whether this plan assignment is currently active
    </data_dictionary>
    </table>

    <table>
    <table_name>customer_interactions</table_name>
    <table_description>Main fact table storing all customer interactions across all channels</table_description>
    <table_schema>
    customer_interactions (
        interaction_id SERIAL PRIMARY KEY,
        customer_id INTEGER NOT NULL REFERENCES customers(customer_id),
        channel_id INTEGER NOT NULL REFERENCES channels(channel_id),
        interaction_type_id INTEGER NOT NULL REFERENCES interaction_types(interaction_type_id),
        agent_id INTEGER REFERENCES agents(agent_id),
        session_id VARCHAR(50),
        start_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        end_timestamp TIMESTAMP,
        duration_seconds INTEGER,
        queue_time_seconds INTEGER DEFAULT 0,
        resolution_status VARCHAR(20) CHECK (resolution_status IN ('Resolved', 'Pending', 'Escalated', 'Cancelled')) DEFAULT 'Pending',
        satisfaction_score DECIMAL(3,2) CHECK (satisfaction_score BETWEEN -1.0 AND 1.0),
        interaction_summary TEXT,
        language VARCHAR(5) DEFAULT 'es',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    </table_schema>
    <data_dictionary>
    interaction_id: Unique identifier for each interaction
    customer_id: Reference to customer who initiated interaction
    channel_id: Reference to channel used for interaction
    interaction_type_id: Reference to type of interaction
    agent_id: Reference to agent who handled interaction (NULL for self-service)
    session_id: Session identifier for grouping related interactions
    start_timestamp: When interaction started
    end_timestamp: When interaction ended (NULL for ongoing)
    duration_seconds: Total duration of interaction in seconds
    queue_time_seconds: Time customer waited before being served
    resolution_status: Current status (Resolved, Pending, Escalated, Cancelled)
    satisfaction_score: Customer satisfaction score (-1.0 to 1.0, where -1 is very dissatisfied, 1 is very satisfied)
    interaction_summary: Brief summary of the interaction
    language: Language used during interaction
    </data_dictionary>
    </table>
</tables>
</db_tables_available>
